{
  "hash": "26c194ef15866871c6ca959403ca39c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Collaborative coding with GitHub and Rstudio\"\nsubtitle: \"EvoLottery\"\n---\n\n\n## **EvoLottery**\n\n### **Welcome to the evolutionary lottery of skull and beak morphology**\n\n\n\n*** \n<br>\n\n> ##### **Beak and skull shapes in birds of prey (“raptors”) are strongly coupled and largely controlled by size.** \n\n- In this exercise, each participant will **fork a GitHub repo**, and **contribute a file** required to simulate the *evolutionary trajectory of an imaginary species' body size*.\n\n- We'll use **GitHub to collate all species files** and **plot** them all up together at the end! We'll also **discover the skull and beak shapes** associated with each simulated species size.\n\n\n#####  Start!\n\n\n\n# Clone Github repo\n\n##  Start with GitHub repo\n\n<https://github.com/r-rse/evolottery>\n\n\n![](assets/repo.png)\n\n## **Fork  it** \n\nmake your **own copy of the repository** on GitHub. Fork are linked and traceable\n\n\n![](assets/fork-1.png)\n\n\nGitHub asks you to confirm some details:\n\n\n\n![](assets/fork-1b.png)\n\nAnd makes a copy in your account:\n\n![](assets/fork-2a-gk.png)\nYou now have a copy in your account!\n\n![](assets/fork-2b-gk.png)\n\n\n\n<br>\n\n\n## **Copy repo URL** \n\n**copy repo link** to create a new Rstudio project from the repository.\n    \n \n![](assets/copy-repo-url.png) \n\n## **Create new project in Posit Cloud from GitHub**\n\n\n::: {.callout-tip collapse=\"true\"}\n## Cloning a repository locally in Rstudio\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/newproj-1.png){width=90%}\n:::\n:::\n\n \n\nCheckout from **version control repository**\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/newproj-2.png){width=90%}\n:::\n:::\n\n \n\nClone project from a **git** repository\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/newproj-3.png){width=90%}\n:::\n:::\n\n \n\nPaste **repo link copied from GitHub** into **Repository URL** field. Click **`Create Project`**. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/newproj-4.png){width=90%}\n:::\n:::\n\n \n\n\nRstudio project now **contains all files from the GitHub repo.**\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/newproj-5.png){width=90%}\n:::\n:::\n\n \n:::\n\n\nIn your own personal workspace, create a new project from a GitHub repository. \n\n![](assets/pc-proj-from-repo-1.png)\n\n\nPaste **repo link copied from GitHub** into **Repository URL** field. Click **`Create Project`**. \n\n![](assets/pc-proj-from-repo-2.png)\nYou now have a copy of the materials in you Posit Cloud account, ready to work with!\n\n![](assets/cloned-repo.png)\n\n# **Make a change to the repo**\n\n## Make a copy of `params_tmpl.R`\n\n<div class=\"alert alert-warning\">Please ***DO NOT OVERWRITE*** **`params/params_tmpl.R`**.</div>\n\nClick on the **`params/`** folder to open it, select **`params_tmpl.R`** and click on {{< fa cog >}} and  **`Copy`**.\n\n\n![](assets/params-copy-1.png)\nUse species name of your choice to name new file. \n\n![](assets/params-copy-2.png)\n\n\n# Edit **new params file**\n\n## Open params file\n\n![](assets/params-open.png)\n## Edit params file\n\nEdit file with parameters of your choice and save.\n\n<div class=\"alert alert-warning\">Please ***DO NOT OVERWRITE*** **`params/params_tmpl.R`**.</div>\n \n![](assets/params-edit-1.png)\n\n\n#### The parameters each participants need to supply are:\n\n- **`sig2`:** A numeric value greater than 0 but smaller than 5\n\n- **`species.name`:** a character string e.g. `\"anas_krystallinus\"`. Try to create a species name out of your name!\n\n- **`color`:**  a character string e.g. `\"red\"`, `\"#FFFFFF\"` (Check out list of [**colours in R**](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf))\n\n\n**NB: remember to save the changes to your file**\n\n\n# Commit changes locally to git\n\nIn the *git* tab, select the **new file** you created and click **`Commit`**.\n\n<div class=\"alert alert-warning\">Please **ONLY COMMIT YOUR NEW FILE**</div>\n\n \n![](assets/commit-1.png)\n\nWrite an informative commit message and click **`Commit`**  \n\n![](assets/commit-2.png)\n\nyour new file has now been commited  \n\n![](assets/commit-3.png)\n\n\n# Push changes to GitHub\n\non the *git* tab click ⇧  to **push changes to GitHub**\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/push-1.png){width=90%}\n:::\n:::\n\n\n![](assets/push-1.png)\n\nchanges have now been updated in the **GitHub repo**\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/push-2.png){width=90%}\n:::\n:::\n\n\n![](assets/push-2.png)\n\n![](assets/push-3.png)\n\n#  Create pull request\n\nIn your repository, create **`new pull request`** \nto merge fork to master repo (ie the original repo you forked)\n\n\n\n![](assets/pr-1.png)\n\n\nGitHub checks whether your requested merge creates any coflicts. \nIf all is good, click on **`Create pull request`**\n\n\n![](assets/pr-2.png)\n\n\nWrite an informative message explaining your changes to the master repo administrators. Click on **`Create pull request`**\n\n![](assets/pr-3.png)\n\n\nThe repository owner will then review your PR and either merge it in or respond with some guidance if they spot a problem.\n\n![](assets/pr-merged-1.png)\n\nCheck original repo to see **your merged changes**\n\n![](assets/pr-merged-2.png)\n\n\n\nWe'll merge all contributions and [plot them together at the end!](https://r-rse.github.io/evolottery/plot_trait_evolution.html) \n\nNow that everyone has contributed to the [**r-rse** repository](https://github.com/r-rse/evolottery) (the **upstream** repository), the `params/` folder contains a number of files, one for each successful pull request.\n\nHowever your local copy of the repository only contains the template and your own file. \n\n> Q: How can I merge changes from the **upstream** repository to my **local** repository?\n\n## Add upstream remote\n\n### Check current remotes\n\nWe can check the urls of remotes currently linked to our local repo using `usethis::git_remotes()`.\n\n``` r\nusethis::git_remotes()\n```\n```\n$origin\n[1] \"https://github.com/annakrystalli/evolottery.git\"\n```\nWe see that only my form is currently listed as a remote under the name `origin`. \n\n### Add the r-rse repo as upstream\n\nTo add a new remote we need the https url of the upstream repo (the equivalent of the one we used to create our project from our fork through version control) which in this case is `https://github.com/r-rse/evolottery`. \n\nWe can then use `usethis::use_git_remote()` to set the upstream repository:\n\n```r\nusethis::use_git_remote(\n    name = \"upstream\", \n    url = \"https://github.com/r-rse/evolottery.git\")\n```\n\nWe can check that everything was set correctly with `usethis::git_remotes()`\n\n``` r\nusethis::git_remotes()\n```\n```\n$origin\n[1] \"https://github.com/annakrystalli/evolottery.git\"\n\n$upstream\n[1] \"https://github.com/r-rse/evolottery.git\"\n```\n\n### Synch with upstream\n\nFinally, to synch with the upstream repository we can now use function `usethis::pr_merge_main()`. This fetches the master branch from the upstream repository and merges it into our own local master branch.\n\n```r\nusethis::pr_merge_main()\n```\n```\n✔ Pulling changes from 'upstream/main'.\n```\n\nYou should now have all participant files in the `params/` folder and will be able to generate all bird skulls if you run `plot_trait_evolution.Rmd` locally.\n\n## Synch origin\n\nTo also synch your origin remote repository you can simply push the merged upstream changes up to GitHub.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}