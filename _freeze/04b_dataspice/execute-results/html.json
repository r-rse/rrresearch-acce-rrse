{
  "hash": "b63c4668bfb1c2e5168e9d58f9de591f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating metadata with `dataspice`\"\nsubtitle: \"Metadata\"\n---\n\n\n\nThe goal of this section is to provide a **practical exercise in creating metadata** for an **example field collected data product** using package `dataspice`. \n\n- Understand basic metadata and why it is important.\n\n- Understand where and how to store them.\n\n- Understand how they can feed into more complex metadata objects.\n\n# `dataspice` workflow\n\n\n![](https://raw.githubusercontent.com/ropensci/dataspice/main/man/figures/dataspice_workflow.png)\n\n_see [introductory slides](#04a_metadata_intro.qmd)_\n\n\nLet's load our library and start creating some metadata! Let's also load `dplyr` which we'll use to extract and collect some metadata programmatically.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dataspice)\nlibrary(dplyr)\n```\n:::\n\n\n\n# Create the metadata folder\n\nWe'll **start by creating the basic metadata `.csv` files** in which to collect metadata related to our example dataset using function **`dataspice::create_spice()`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_spice()\n```\n:::\n\n\nThis **creates a `metadata` folder** in your project's `data` folder (although you can specify a different directory if required) containing **4 `.csv` files** in which to record your metadata.\n\n\n![dataspice_files](assets/dataspice_files.png)\n\n- **access.csv**: record details about where your data can be accessed.\n- **attributes.csv**: record details about the variables in your data.\n- **biblio.csv**: record dataset level metadata like title, description, licence and spatial and temoral coverage.\n- **creators.csv**: record creator details.\n\n# Record metadata\n## `creators.csv`\n\n> The `creators.csv` contains details of the **dataset creators**.\n\nLet's start with a quick and easy file to complete, the **creators**. We can **open and edit** the file using in an **interactive shiny app** using **`dataspice::edit_creators()`**. \n\n***Although we did not collect this data, just complete with your own details for the purposes of this tutorial.***\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedit_creators()\n```\n:::\n\n\n\n![](assets/edit_creators.png)\n\nRemember to click on **Save** when you're done editing.\n\n<br>\n\n## `access.csv`\n\n> The `access.csv` contains details about **where the data can be accessed**.\n\nBefore manually completing any details in the `access.csv`,  we can use `dataspice`'s  dedicated function **`prep_access()` to extract relevant information** from the data files themselves.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_access()\n```\n:::\n\n\nNext, we can **use function `edit_access()`** to view `access`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nedit_access()\n```\n:::\n\n\nThe final details required, namely **the URL at which each dataset can be downloaded from** cannot be completed now so just leave that blank for now.\n\nEventually it should link to a permanent identifier from which the published. data set can be downloaded from.\n\nWe can also edit details such as the `name` field to something more informative if required.\n\n![](assets/edit_access.png)\n\nRemember to click on **Save** when you're done editing.\n\n<br>\n\n##  `biblio.csv`\n\n> The `biblio.csv` contains dataset level metadata like **title**, **description**, **licence** and **spatial** and **temporal coverage**.\n\nBefore we start filling this table in, we can use some base R functions to extract some of the information we require. In particular we can **use function `range()` to extract the temporal and spatial extents of our data from the columns containing temporal and spatial data.**\n\nLet's load our data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindividual <- readr::read_csv(here::here(\"data\", \"individual.csv\"))\n```\n:::\n\n\n\n### get **temporal extent**\n\nAlthough dates are stored as a text string, **because they are in ISO format (YYYY-MM-DD), sorting them results in correct chronological ordering**. If your temporal data is not in ISO format, consider converting them (see package `lubridate`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(individual$date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2015-05-18\" \"2018-11-16\"\n```\n\n\n:::\n:::\n\n\n### get **geographical extent**\n\nThe lat/lon coordinates are in decimal degrees which again are easy to sort or calculate the range in each dimension. \n\n#### South/North boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(individual$decimal_latitude)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17.95570 47.16582\n```\n\n\n:::\n:::\n\n\n#### West/East boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(individual$decimal_longitude)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -99.11107 -66.82463\n```\n\n\n:::\n:::\n\n\n_NB: you can also supply the geographic boundaries of your data as a single [well-known text string](https://en.wikipedia.org/wiki/Well-known_text) in field `wktString` instead of supplying the four boundary coordinates._\n\n### Geographic description\n\nWe'll also need a geographic textual description.\n\nLet's check the unique values in `domain_id` and use those to create a geographic description.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(individual$domain_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"D01\" \"D02\" \"D03\" \"D04\" \"D07\" \"D08\" \"D09\"\n```\n\n\n:::\n:::\n\n We could use `NEON Domain areas D01:D09` for our geographic description.\n\n\nNow that we've got the values for our temporal and spatial extents and decided on the geographic description, we can **complete the rest of the fields in the `biblio.csv` file using function `dataspice::edit_biblio()`**. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nedit_biblio()\n```\n:::\n\n\n\n![](assets/edit_biblio.png)\n\n<div class=\"alert alert-success\">\n\n### :mag: metadata hunt\n\n#### Complete the rest of the fields in `biblio.csv`\n\nAdditional information required to complete these fields can be found on the [**NEON data portal page for this dataset**](http://data.neonscience.org/data-product-view?dpCode=DP1.10098.001) and the **`data-raw/wood-survey-data-master` [README.md](data-raw/wood-survey-data-master/README.md)**\n\n\n\n**Citation:**\n_National Ecological Observatory Network. 2020. Data Products: DP1.10098.001.  Provisional data downloaded from http://data.neonscience.org on 2020-01-15. Battelle, Boulder, CO, USA_\n\nHere's [an example to get you started](data/metadata/biblio-half.csv)\n\n</div>\n\nRemember to click on **Save** when you're done editing.\n\n\n<br>\n\n## `attributes.csv`\n\n> The `attributes.csv` contains details about the **variables** in your data.\n\nAgain, `dataspice` provides functionality to **populate the `attributes.csv` by extracting the variable names from our data file** using function **`dataspice::prep_attributes()`**.\n\nThe functions is vectorised and maps over each `.csv` file in our `data/` folder.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep_attributes()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/edit_attributes.png){width=100%}\n:::\n:::\n\nAll column names in `individual.csv` have been successfully extracted into the `variableName` column.\n\nNow, we could manually complete the `description` and `unitText` fields,... or we can use a secret weapon, \n`NEON_vst_variables.csv` in our raw data!\n\nLet's read it in and have a look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables <- readr::read_csv(here::here(\n  \"data-raw\", \"wood-survey-data-master\",\n  \"NEON_vst_variables.csv\"\n))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 117 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): table, fieldName, description, dataType, units, downloadPkg\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nvariables\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 117 × 6\n   table          fieldName       description         dataType units downloadPkg\n   <chr>          <chr>           <chr>               <chr>    <chr> <chr>      \n 1 vst_shrubgroup uid             Unique ID within N… string   <NA>  basic      \n 2 vst_shrubgroup namedLocation   Name of the measur… string   <NA>  basic      \n 3 vst_shrubgroup date            Date or date and t… dateTime <NA>  basic      \n 4 vst_shrubgroup eventID         An identifier for … string   <NA>  basic      \n 5 vst_shrubgroup domainID        Unique identifier … string   <NA>  basic      \n 6 vst_shrubgroup siteID          NEON site code      string   <NA>  basic      \n 7 vst_shrubgroup plotID          Plot identifier (N… string   <NA>  basic      \n 8 vst_shrubgroup subplotID       Identifier for the… string   <NA>  basic      \n 9 vst_shrubgroup nestedSubplotID Numeric identifier… string   <NA>  basic      \n10 vst_shrubgroup groupID         Identifier for a g… string   <NA>  basic      \n# ℹ 107 more rows\n```\n\n\n:::\n:::\n\n\n\nAll original data variable names are contained in `fieldName`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables$fieldName\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"uid\"                           \"namedLocation\"                \n  [3] \"date\"                          \"eventID\"                      \n  [5] \"domainID\"                      \"siteID\"                       \n  [7] \"plotID\"                        \"subplotID\"                    \n  [9] \"nestedSubplotID\"               \"groupID\"                      \n [11] \"taxonID\"                       \"scientificName\"               \n [13] \"taxonRank\"                     \"identificationReferences\"     \n [15] \"identificationQualifier\"       \"volumePercent\"                \n [17] \"livePercent\"                   \"deadPercent\"                  \n [19] \"canopyArea\"                    \"meanHeight\"                   \n [21] \"remarks\"                       \"measuredBy\"                   \n [23] \"recordedBy\"                    \"dataQF\"                       \n [25] \"uid\"                           \"namedLocation\"                \n [27] \"date\"                          \"eventID\"                      \n [29] \"domainID\"                      \"siteID\"                       \n [31] \"plotID\"                        \"subplotID\"                    \n [33] \"individualID\"                  \"tempShrubStemID\"              \n [35] \"tagStatus\"                     \"growthForm\"                   \n [37] \"plantStatus\"                   \"stemDiameter\"                 \n [39] \"measurementHeight\"             \"height\"                       \n [41] \"baseCrownHeight\"               \"breakHeight\"                  \n [43] \"breakDiameter\"                 \"maxCrownDiameter\"             \n [45] \"ninetyCrownDiameter\"           \"canopyPosition\"               \n [47] \"shape\"                         \"basalStemDiameter\"            \n [49] \"basalStemDiameterMsrmntHeight\" \"maxBaseCrownDiameter\"         \n [51] \"ninetyBaseCrownDiameter\"       \"remarks\"                      \n [53] \"recordedBy\"                    \"measuredBy\"                   \n [55] \"dataQF\"                        \"uid\"                          \n [57] \"namedLocation\"                 \"date\"                         \n [59] \"domainID\"                      \"siteID\"                       \n [61] \"plotID\"                        \"plotType\"                     \n [63] \"nlcdClass\"                     \"decimalLatitude\"              \n [65] \"decimalLongitude\"              \"geodeticDatum\"                \n [67] \"coordinateUncertainty\"         \"easting\"                      \n [69] \"northing\"                      \"utmZone\"                      \n [71] \"elevation\"                     \"elevationUncertainty\"         \n [73] \"eventID\"                       \"samplingProtocolVersion\"      \n [75] \"treesPresent\"                  \"treesAbsentList\"              \n [77] \"shrubsPresent\"                 \"shrubsAbsentList\"             \n [79] \"lianasPresent\"                 \"lianasAbsentList\"             \n [81] \"nestedSubplotAreaShrubSapling\" \"nestedSubplotAreaLiana\"       \n [83] \"totalSampledAreaTrees\"         \"totalSampledAreaShrubSapling\" \n [85] \"totalSampledAreaLiana\"         \"remarks\"                      \n [87] \"measuredBy\"                    \"recordedBy\"                   \n [89] \"dataQF\"                        \"uid\"                          \n [91] \"namedLocation\"                 \"date\"                         \n [93] \"eventID\"                       \"domainID\"                     \n [95] \"siteID\"                        \"plotID\"                       \n [97] \"subplotID\"                     \"nestedSubplotID\"              \n [99] \"pointID\"                       \"stemDistance\"                 \n[101] \"stemAzimuth\"                   \"recordType\"                   \n[103] \"individualID\"                  \"supportingStemIndividualID\"   \n[105] \"previouslyTaggedAs\"            \"samplingProtocolVersion\"      \n[107] \"taxonID\"                       \"scientificName\"               \n[109] \"taxonRank\"                     \"identificationReferences\"     \n[111] \"morphospeciesID\"               \"morphospeciesIDRemarks\"       \n[113] \"identificationQualifier\"       \"remarks\"                      \n[115] \"measuredBy\"                    \"recordedBy\"                   \n[117] \"dataQF\"                       \n```\n\n\n:::\n:::\n\n\nNotice anything inconsistent with `variableName` in attributes? _hint: a hump_\n\nYes you guessed it, the original `fieldName`s are still in camelCase. \n\nBut! It also contains `description` and `units` columns! Just what we need!\n\n<div class=\"alert alert-success\">\n\n## Mega-Challenge!!\n\n## Your challenge is to successfully merge the relevant contents of `variables` into our `attributes.csv` \n\nYou will need to save your merged table to `data/metadata/attributes.csv`.\n\nHave a look at `janitor::make_clean_names()` and see if you can combine it with any other functions you've learned to mutate the values of columns to get round the camelCase names in `variables`. You'll need to have a good look at the `by` argument in the [`*_join` family](https://dplyr.tidyverse.org/reference/join.html) to figure out how to join by columns that contain the data you want to join by but have different names. You also will find `dplyr` function [`rename`](https://dplyr.tidyverse.org/reference/rename.html) useful!\n\nOnce you've completed your merge and saved it, use `dataspice::edit_attributes()` to fill in the final details for the few variables we created.\n\n\n\n::: {.callout-tip appearance=\"minimal\" collapse=\"true\"}\n# `dataspice` mega challenge solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariables <- readr::read_csv(\n  here::here(\n    \"data-raw\", \"wood-survey-data-master\",\n    \"NEON_vst_variables.csv\"\n  ),\n  col_types = readr::cols(.default = \"c\")\n) %>%\n  dplyr::mutate(fieldName = janitor::make_clean_names(fieldName)) %>%\n  select(fieldName, description, units)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes <- readr::read_csv(here::here(\"data\", \"metadata\", \"attributes.csv\")) %>%\n  select(-description, -unitText)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 32 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): fileName, variableName\nlgl (2): description, unitText\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::left_join(attributes, variables, by = c(\"variableName\" = \"fieldName\")) %>%\n  dplyr::rename(unitText = \"units\") %>%\n  readr::write_csv(here::here(\"data\", \"metadata\", \"attributes.csv\"))\n```\n:::\n\n\n\n:::\n\n</div>\n\n\n# Create metadata json-ld file\n\nNow that all our metadata files are complete, we can **compile it all into a structured `dataspice.json` file** in our `data/metadata/` folder. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_spice()\n```\n:::\n\n\n\nWe can **read the `dataspice.json` file**  into R as a list using the `jsonlite` function `read_json()` and then **inspect it using the `listviewer` package funtion `jsonedit`**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njsonlite::read_json(here::here(\"data\", \"metadata\", \"dataspice.json\")) %>%\n  listviewer::jsonedit()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"jsonedit html-widget html-fill-item\" id=\"htmlwidget-7226cdad8c02d91b6cf2\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7226cdad8c02d91b6cf2\">{\"x\":{\"data\":{\"@context\":\"http://schema.org\",\"type\":\"Dataset\",\"name\":\"NEON Woody plant survey data: ACCE DTP analytical subset\",\"creator\":[{\"type\":\"Person\",\"id\":\"0000-0002-2378-4915\",\"givenName\":\"Anna\",\"familyName\":\"Krystalli\",\"email\":\"r.rse.eu@gmail.com\",\"affiliation\":\"R-RSE\"}],\"description\":\"This data product, sourced from the NEON data portal for the purposes of the ACCE DTP tutorial, contains processed individual level data from measurements of woody individuals and shrub groups. \",\"datePublished\":\"01/05/2020\",\"keywords\":[\"annual net primary productivity (ANPP)\",\"biomass\",\"carbon cycle\",\"lianas\",\"net primary productivity (NPP)\",\"plant productivity\",\"plants\",\"production\",\"productivity\",\"saplings\",\"shrubs\",\"trees\",\"vegetation\",\"woody plants\"],\"funder\":\"National Science Foundation\",\"temporalCoverage\":\"2015-05-18/2018-11-16\",\"license\":\"CC-0\",\"spatialCoverage\":{\"type\":\"Place\",\"name\":\"NEON Domain areas D01:D09\",\"geo\":{\"type\":\"GeoShape\",\"box\":\"47.16582 -66.82463 17.9557 -99.11107\"}},\"variableMeasured\":[{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"uid\",\"description\":\"Unique ID within NEON database; an identifier for the record in apparentindividual.csv\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"named_location\",\"description\":\"Name of the measurement location in the NEON database\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"date\",\"description\":\"Date or date and time of measurement, observation, or collection event\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"event_id\",\"description\":\"An identifier for the set of information associated with the event, which includes information about the place and time of the event\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"domain_id\",\"description\":\"Unique identifier of the NEON domain\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"site_id\",\"description\":\"NEON site code\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"plot_id\",\"description\":\"Plot identifier (NEON site code_XXX)\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"individual_id\",\"description\":\"Domain-level unique identifier for an individual: NEON.MOD.D##.######\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"growth_form\",\"description\":\"The growth form classification\"},{\"type\":\"PropertyValue\",\"unitText\":\"centimeter\",\"name\":\"stem_diameter\",\"description\":\"Cross-sectional stem diameter\"},{\"type\":\"PropertyValue\",\"unitText\":\"centimeter\",\"name\":\"measurement_height\",\"description\":\"Height at which stemDiameter is measured\"},{\"type\":\"PropertyValue\",\"unitText\":\"meter\",\"name\":\"height\",\"description\":\"Highest point of an individual or average height of a patch\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"uid_map\",\"description\":\"Unique ID within NEON database; an identifier for the record in mappingandtagging.csv\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"point_id\",\"description\":\"Identifier for a point location\"},{\"type\":\"PropertyValue\",\"unitText\":\"meter\",\"name\":\"stem_distance\",\"description\":\"Horizontal distance from stem to pointID location\"},{\"type\":\"PropertyValue\",\"unitText\":\"degree\",\"name\":\"stem_azimuth\",\"description\":\"Azimuth relative to True North between stem and pointID location\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"taxon_id\",\"description\":\"Species code, based on one or more sources\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"scientific_name\",\"description\":\"Scientific name, associated with the taxonID. This is the name of the lowest level taxonomic rank that can be determined\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"taxon_rank\",\"description\":\"The lowest level taxonomic rank that can be determined for the individual or specimen\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"uid_ppl\",\"description\":\"Unique ID within NEON database; an identifier for the record in perplotperyear.csv\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"plot_type\",\"description\":\"NEON plot type in which sampling occurred: tower, distributed or gradient\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"nlcd_class\",\"description\":\"National Land Cover Database Vegetation Type Name\"},{\"type\":\"PropertyValue\",\"unitText\":\"decimalDegree\",\"name\":\"decimal_latitude\",\"description\":\"The geographic latitude (in decimal degrees, WGS84) of the geographic center of the reference area\"},{\"type\":\"PropertyValue\",\"unitText\":\"decimalDegree\",\"name\":\"decimal_longitude\",\"description\":\"The geographic longitude (in decimal degrees, WGS84) of the geographic center of the reference area\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"geodetic_datum\",\"description\":\"Model used to measure horizontal position on the earth\"},{\"type\":\"PropertyValue\",\"unitText\":\"meter\",\"name\":\"easting\",\"description\":\"Geographic coordinate specifying the east-west position of a point on the Earth's surface (Universal Transverse Mercator, UTM)\"},{\"type\":\"PropertyValue\",\"unitText\":\"meter\",\"name\":\"northing\",\"description\":\"Geographic coordinate specifying the north-south position of a point on the Earth's surface (Universal Transverse Mercator, UTM)\"},{\"type\":\"PropertyValue\",\"unitText\":[],\"name\":\"utm_zone\",\"description\":\"UTM zone\"},{\"type\":\"PropertyValue\",\"unitText\":\"meter\",\"name\":\"elevation\",\"description\":\"Elevation (in meters) above sea level\"},{\"type\":\"PropertyValue\",\"unitText\":\"meter\",\"name\":\"elevation_uncertainty\",\"description\":\"Uncertainty in elevation values (in meters)\"},{\"type\":\"PropertyValue\",\"unitText\":\"decimalDegree\",\"name\":\"stem_lat\",\"description\":\"The geographic latitude (in decimal degrees, WGS84) of individual plants\"},{\"type\":\"PropertyValue\",\"unitText\":\"decimalDegree\",\"name\":\"stem_lon\",\"description\":\"The geographic latitude (in decimal degrees, WGS84) of individual plants\"}],\"distribution\":[{\"type\":\"DataDownload\",\"name\":\"individual\",\"contentUrl\":[],\"encodingFormat\":\"csv\"}]},\"options\":{\"mode\":\"tree\",\"modes\":[\"text\",\"tree\",\"table\"]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n**Publishing this file on the web means it will be indexed by Google Datasets search!** :smiley: :+1: \n\n<br>\n\n***\n\n# Build README site\n\nFinally, we can **use the `dataspice.json` file** we just created to **produce an informative README HTML web page** to include with our dataset for humans to enjoy! :star_struck:\n\nWe use function **`dataspice::build_site()`** which **creates file `index.html`** in the `data/` folder of your project (which it creates if it doesn't already exist).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_site(out_path = \"data/index.html\")\n```\n:::\n\n\n<br> \n\n## View the resulting file [here](data/index.html)\n\n<br>\n\nHere's a screen shot!\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/index_webshot.png){width=100%}\n:::\n:::\n\n\n\n## Example completed metadata files\n\n- [`access.csv`](https://github.com/r-rse/rrresearch-acce-rrse/blob/main/data/metadata/access.csv)\n- [`attributes.csv`](https://github.com/r-rse/rrresearch-acce-rrse/blob/main/data/metadata/attributes.csv)\n- [`biblio.csv`](https://github.com/r-rse/rrresearch-acce-rrse/blob/main/data/metadata/biblio.csv)\n- [`creators.csv`](https://github.com/r-rse/rrresearch-acce-rrse/blob/main/data/data/metadata/creators.csv)\n\n***\n\n _back to the [outro slides](slides/04_metadata.html#30)_\n",
    "supporting": [
      "04b_dataspice_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/jsoneditor-0.18.7/jsoneditor.min.js\"></script>\n<script src=\"site_libs/jsonedit-binding-4.0.0/jsonedit.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}