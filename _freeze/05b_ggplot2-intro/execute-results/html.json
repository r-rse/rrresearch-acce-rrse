{
  "hash": "4287715ee20c52a8df95fc9dd1345685",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to `ggplot2`\"\n---\n\n\n\n## Graphics in R\n\nThe R language has extensive graphical capabilities.\n\nGraphics in R may be created by many different methods including base graphics and more advanced plotting packages such as lattice and ggplot2.\n\n\nYou'll find a rich selection of graphs in R at [The R Graph Gallery](https://www.r-graph-gallery.com/)\n\n\n::: {.cell}\n<iframe src=\"https://www.r-graph-gallery.com/\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\n\n### `ggplot2`\n\nThe ggplot2 package was created by Hadley Wickham and provides an intuitive plotting system to rapidly generate publication quality graphics.\n\n**`ggplot2` builds on the \"Grammar of Graphics\"** \n\n#### Resources\n\n[**Paper on the grammar of graphics as the foundation for `ggplot2`**](https://vita.had.co.nz/papers/layered-grammar.html)\n\n\n**Online working draft of 3rd Edition of** [***`ggplot2`: Elegant Graphics for Data Analysis***](https://ggplot2-book.org/)\n\n\n::: {.cell}\n<iframe src=\"https://ggplot2-book.org/\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n[**`ggplot2` documentation**](https://ggplot2.tidyverse.org/index.html)\n\n\n::: {.cell}\n<iframe src=\"https://ggplot2.tidyverse.org/index.html\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\n**`ggplot2` cheatsheet**\n\n\n::: {.cell}\n<iframe src=\"assets/cheatsheets/data-visualization-2.1.pdf\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\n\n### `ggplot2` in practice. Plotting `mtcars`\n\nTo demonstrate the use of `ggplot2` to plot data according to the grammar of graphics, let's recreate the `mtcars` plot I just showed you.\n\nLet's work in our `attic/development.R` script for now.\n\n#### Initialising a plot\n\nThe first thing we need to do is initialise a new plot.\n\n<div class=\"alert alert-info\">\n\nFunction `ggplot()` is used to construct the initial plot object, and is [**almost always followed by `+`**](https://ggplot2.tidyverse.org/reference/gg-add.html) to add component to the plot. \n\n\n::: {.cell}\n<iframe src=\"https://ggplot2.tidyverse.org/reference/ggplot.html\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\n</div>\n\nLet's load the library and create an empty plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot()\n```\n\n::: {.cell-output-display}\n![](05b_ggplot2-intro_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n#### Specifying the data\n\nNext thing we need to do is specify the data.\n\nThe first argument to `ggplot()` is the data we want to use for plotting, usually a data.frame or tibble. We can pipe that in to `ggplot()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot()\n```\n\n::: {.cell-output-display}\n![](05b_ggplot2-intro_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n#### Mapping to Aesthetics with `aes()`\n\nNow that we've specified our data, we can start encoding our variables to visual properties of our plot.\n\nLets start by mapping `mpg` and `hp` to our two axes. We do that in the second argument `mapping` through function `aes()`. \n\nFunction `aes()` is used to specify the **set of aesthetic mappings between variables in the data and visual properties** in our plot. \n\n\n::: {.cell}\n<iframe src=\"https://ggplot2.tidyverse.org/reference/aes.html\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\nAny aesthetics defined in `ggplot(aes())` will apply to all subsequent layers unless they are overriden within the individual layers.\n\n\n##### Mapping variables to axes `x` and `y`.\n\nIn our case, we want to map variable `mpg` to aesthetic `x` (the x axis) and variable `hp` to aesthetic `y` (the y axis).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(mapping = aes(x = mpg, y = hp))\n```\n\n::: {.cell-output-display}\n![](05b_ggplot2-intro_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### Adding geometries with `geom_*()`\n\nCurrently, we only have our axes, initialised with reasonably infered scales from the data.\n\nFollowing the specification of data and aesthetics, we next need to specify which geometries (or `geoms`s in ggplot) to use to present the data. The `geom` is a critical component that describes the type of plot used.\n\nSeveral geoms are available in ggplot2 as separate functions:\n\n* `geom_point()` - Scatter plots\n* `geom_line()` - Line plots\n* `geom_smooth()` - Fitted line plots\n* `geom_bar()` - Bar plots\n* `geom_boxplot()` - Boxplots\n* `geom_jitter()` - Jitter to plots\n* `geom_histogram()` - Histogram plots\n* `geom_density()` - Density plots\n* `geom_text()` - Text to plots\n* `geom_errorbar()` - Errorbars to plots\n* `geom_violin()` - Violin plots\n\n\n\n::: {.cell}\n<iframe src=\"https://ggplot2.tidyverse.org/reference/index.html#section-layer-geoms\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n##### Plotting a scatterplot\n\nTo visualise the relationship between the data points in our two variables, and given both are numeric, we can plot them as points on a scatterplot using `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(aes(x = mpg, y = hp)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](05b_ggplot2-intro_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n<iframe src=\"https://ggplot2.tidyverse.org/reference/geom_point.html\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\n\n#### Mapping a third variable\n\nNow that we exhausted our first two options for visual encoding, we can use other aesthetics in our plot to map additional variables to. Example aesthetics available for `geom_point()` are\n\n- `color` or `colour`: colour mapping.\n- `shape`: mapping to symbols used for points.\n- `fill`: colour mapping to shapes that have a `fill` attribute.\n- `size`: mapping to the size of points.\n\nLet's now map the number of cylinders `cyl` to the `colour` of points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(aes(x = mpg, y = hp, colour = cyl)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](05b_ggplot2-intro_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNow each point is coloured according to the value of `cyl`. \n\nBecause `cyl` is numeric, the default behaviour of R is to present it on a continuous scale, hence the colour gradient legend. \n\nIf we want to present `cyl` as a categorical variable, we can override that behaviour by turning it into a factor using `factor()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(aes(x = mpg, y = hp, colour = factor(cyl))) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](05b_ggplot2-intro_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n#### Adding a plot theme\n\nFinally, any design elements can be specified in the theme layer. Theme elements can be customised using function [`theme()`](https://ggplot2.tidyverse.org/reference/theme.html) \n\n\n\n::: {.cell}\n<iframe src=\"https://ggplot2.tidyverse.org/reference/theme.html\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\n`ggplot2` also has a number of in built themes. Let's just use one of those.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  ggplot(aes(x = mpg, y = hp, fill = factor(cyl))) +\n  geom_point() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05b_ggplot2-intro_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "05b_ggplot2-intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}