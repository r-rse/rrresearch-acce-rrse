{
  "hash": "968ed334bb88a80b1cfd7cbd9d84daa8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Project Data, Structure & Paths\"\nsubtitle: \"Project Management\"\n---\n\n\n## Project Aims & Objectives\n\n::: {.callout-tip icon=\"false\"}\nBefore we begin, let's clarify the aims of the project and learning objectives rest of the workshop.\n\n### Project Aim\n\nWe'll be working with a **subset of data from the NEON Woody plant vegetation survey**. The aim of the project is to **combine multiple files into a single analytical dataset** and **explore the data through visualisation and basic analysis**.\n\n### Project Objectives\n\n1.  The **nature of the data**, which is spread across multiple files and tables with a lot of extraneous information, provides us a **more realistic opportunity to practice what 50-80% of data analysis and modeling work actually is: data cleaning, combining and munging!** From our raw data, the aim is to **produce a clean analytical dataset** using a reproducible R script.\n\n2.  Once we've produced our analytical data, we'll move on to **explore our data through visualisation using `ggplot2`** and perform some very basic analysis.\n\n3.  We'll finally bring it all together, code, narrative, data and plots in **scientific report generation with Quarto**.\n:::\n\n\n\n\n\n## Project Data\n\nWe're in our new project so the first thing we need to do is **get the data we'll be working with**. This is a common start to any project where you start with a few data files. These might be generated through your own data collection, given to you by others or published data products and you **might need to clean, wrangle and combine them together to perform your analysis**.\n\n> Q: Where should I save my raw data files?\n\n### conventions: Data management\n\n1.  **Store raw data in `data-raw/`**: raw inputs to any pre-processing, read only.\n\n  -   Keep any processing scripts in the same folder\n  -   Whether and where you publish data depends on size and copyright considerations.\n\n2.  **Store analytical data in `data/`**: any clean, processed data that is used as the input to the analysis.\n\n  -   Should be published along side analysis.\n\n## Setting up a `data-raw/` directory\n\nWe **start by creating a `data-raw` directory** in the root of our project. We can **use `usethis` function `usethis::use_data_raw()`**. This creates the `data-raw` directory and an `.R` script within where we can save code that turns raw data into analytical data in the `data/` folder.\n\nWe can **supply a name for the analytical dataset** we'll be creating in our script which **automatically names the `.R` script for easy provenance tracking**. In this case, we'll be calling it `individual.csv` so let's use `\"individual\"` for our name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_data_raw(name = \"individual\")\n```\n:::\n\n\n``` r\n✔ Setting active project to '/cloud/project'\n✔ Creating 'data-raw/'\n✔ Adding '^data-raw$' to '.Rbuildignore'\n✔ Writing 'data-raw/individual.R'\n• Modify 'data-raw/individual.R'\n• Finish the data preparation script in 'data-raw/individual.R'\n• Use `usethis::use_data()` to add prepared data to package\n```\n\nThe **`data-raw/individual.R`** script created contains:\n\n``` r\n## code to prepare `individual` dataset goes here\n\nusethis::use_data(individual, overwrite = TRUE)\n```\n\nWe will use this file to perform the necessary preprocessing on our raw data.\n\n\n::: {.cell}\n\n:::\n\n\nHowever, in the mean time **we will also be experimenting with code and copying code over to our `individual.R` script when we are happy with it**. so let's create a new R script to work in.\n\n**File \\> New File \\> R script**\n\nLet's save this file in a **new folder called `attic/`** and save it as file **`development.R`**.\n\n![](assets/new-dir-attic.png)\n\nLet's work in `development.R` for now.\n\n\n### Download data\n\nNow that we've got our `data-raw` folder, let's **download our data into it using function `usethis::use_course()`** and supplying it with the url to the materials repository (**`bit.ly/wood-survey-data`**) and the **path to the directory we want the materials saved into** (`\"data-raw\"`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_course(\"bit.ly/wood-survey-data\",\n           destdir = \"data-raw\")\n```\n:::\n\n\n``` bash\n✔ Downloading from 'https://bit.ly/wood-survey-data'\nDownloaded: 7.61 MB  \n✔ Download stored in 'data-raw/wood-survey-data-master.zip'\n✔ Unpacking ZIP file into 'wood-survey-data-master/' (77 files extracted)\nShall we delete the ZIP file ('wood-survey-data-master.zip')?\n\n1: Nope\n2: No way\n3: I agree\n\nSelection: 3\n✔ Deleting 'wood-survey-data-master.zip'\n```\n\n## NEON Data\n\nThe downloaded folder contains a **subset of data from the NEON Woody plant vegetation survey**.\n\n**Citation:** *National Ecological Observatory Network. 2020. Data Products: DP1.10098.001. Provisional data downloaded from http://data.neonscience.org on 2020-01-15. Battelle, Boulder, CO, USA*\n\nThis data product was downloaded from the [NEON data portal](http://data.neonscience.org/browse-data) and contains **quality-controlled data from in-situ measurements of live and standing dead woody individuals and shrub groups**, from all terrestrial NEON sites with qualifying woody vegetation.\n\n**Surveys of each site are completed once every 3 years.**\n\nLet's have a look at what we've downloaded:\n\n```         \n.\n├── R\n├── data-raw\n│   ├── individual.R\n│   └── wood-survey-data-master\n│       ├── NEON_vst_variables.csv\n│       ├── README.md\n│       ├── individual [67 entries exceeds filelimit, not opening dir]\n│       ├── methods\n│       │   ├── NEON.DOC.000914vB.pdf\n│       │   ├── NEON.DOC.000987vH.pdf\n│       │   └── NEON_vegStructure_userGuide_vA.pdf\n│       ├── vst_mappingandtagging.csv\n│       └── vst_perplotperyear.csv\n└── wood-survey.Rproj\n```\n\nThe important files for the analysis we want to perform are\n\n```         \n├── individual [67 entries exceeds filelimit, not opening dir]\n├── vst_mappingandtagging.csv\n└── vst_perplotperyear.csv\n```\n\n::: panel-tabset\n## **`vst_perplotperyear`**\n\n#### **`vst_perplotperyear`**: Plot level metadata, including plot geolocation.\n\n-   one record per `plotID` per `eventID`, \n-   describe the presence/absence of woody growth forms \n-   sampling area utilized for each growth form. \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|uid                                  |plotID   |plotType    |nlcdClass       | decimalLatitude| decimalLongitude|geodeticDatum |  easting| northing|utmZone | elevation| elevationUncertainty|eventID       |\n|:------------------------------------|:--------|:-----------|:---------------|---------------:|----------------:|:-------------|--------:|--------:|:-------|---------:|--------------------:|:-------------|\n|93ee1436-cdd8-40bd-96c4-0585f36b904f |BART_002 |distributed |deciduousForest |        44.03508|        -71.27285|WGS84         | 317882.0|  4878281|19N     |     550.8|                  0.4|vst_BART_2016 |\n|4b5f972f-d00f-4766-b7d7-ae488e058416 |BART_003 |distributed |deciduousForest |        44.05525|        -71.26315|WGS84         | 318720.5|  4880500|19N     |     439.5|                  0.3|vst_BART_2016 |\n|66594b70-4db4-4005-bfc8-e42a1bdba15d |BART_006 |distributed |deciduousForest |        44.06051|        -71.31091|WGS84         | 314911.2|  4881190|19N     |     432.7|                  0.2|vst_BART_2016 |\n|730098e8-30a7-4b7a-a5ee-fde5318cc416 |BART_007 |distributed |mixedForest     |        44.04970|        -71.29849|WGS84         | 315873.0|  4879961|19N     |     388.4|                  0.2|vst_BART_2016 |\n|07c96abe-6d78-4818-8b2e-f33fac4d06b5 |BART_010 |distributed |deciduousForest |        44.05007|        -71.26668|WGS84         | 318422.2|  4879932|19N     |     430.2|                  0.2|vst_BART_2016 |\n|557410ec-351d-4348-97e5-6dc0625c4f03 |BART_011 |distributed |mixedForest     |        44.05001|        -71.29627|WGS84         | 316051.2|  4879991|19N     |     370.1|                  0.2|vst_BART_2016 |\n\n\n:::\n:::\n\n\n\n## **`vst_mappingandtagging`**\n\n#### **`vst_mappingandtagging`**: Mapping, identifying and tagging of individual stems for re-measurement.\n\n-   one record per `individualID`. \n-   data invariant through time, including `tagID`, `taxonID` and mapped location. \n-   Records can be linked to `vst_perplotperyear` via the `plotID` and `eventID` fields. \n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|uid                                  |eventID       | pointID| stemDistance| stemAzimuth|individualID            |taxonID |scientificName          |taxonRank |\n|:------------------------------------|:-------------|-------:|------------:|-----------:|:-----------------------|:-------|:-----------------------|:---------|\n|3a4301d5-8ff1-491f-bba7-e0a595ece6af |vst_BART_2015 |      43|         13.1|       341.7|NEON.PLA.D01.BART.00101 |ACRU    |Acer rubrum L.          |species   |\n|229a8489-dfef-4a50-9c2b-9bb4d614173e |vst_BART_2015 |      61|          1.2|       206.2|NEON.PLA.D01.BART.00102 |ACRU    |Acer rubrum L.          |species   |\n|27712596-d6d2-44e4-a462-cbdedef8a408 |vst_BART_2015 |      61|          4.6|       288.9|NEON.PLA.D01.BART.00103 |FAGR    |Fagus grandifolia Ehrh. |species   |\n|de648865-7d18-4a48-96ec-99265dc653ad |vst_BART_2015 |      57|         30.3|        94.7|NEON.PLA.D01.BART.00106 |FAGR    |Fagus grandifolia Ehrh. |species   |\n|04c88265-7e34-4fd7-89ec-dc30a513c265 |vst_BART_2015 |      57|         30.6|        92.8|NEON.PLA.D01.BART.00107 |FAGR    |Fagus grandifolia Ehrh. |species   |\n|ff9975c3-c068-4d48-a27b-5175783d91f6 |vst_BART_2015 |      43|          2.2|        92.3|NEON.PLA.D01.BART.00108 |FAGR    |Fagus grandifolia Ehrh. |species   |\n\n\n:::\n:::\n\n\n\n\n## **`vst_apparentindividual`**\n\n\n#### **`vst_apparentindividual`**: Biomass and productivity measurements of apparent individuals.\n\n\n-   includes biomass, productivity and other measurements. \n-   may contain multiple records per individuals but only one record per `individualID` per `eventID`.\n-   includes growth form, structure\n-   currently in separate files contained in `individual/`\n-   may be linked to: \n    -   `vst_mappingandtagging` records via `individualID`\n    -   `vst_perplotperyear` via the `plotID` and `eventID` fields.\n  \n  \n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|uid                                  |namedLocation         |date       |eventID       |domainID |siteID |plotID   |individualID            |growthForm       | stemDiameter| measurementHeight| height|\n|:------------------------------------|:---------------------|:----------|:-------------|:--------|:------|:--------|:-----------------------|:----------------|------------:|-----------------:|------:|\n|a36a162d-ed1f-4f80-ae45-88e973855c68 |BART_037.basePlot.vst |2015-08-26 |vst_BART_2015 |D01      |BART   |BART_037 |NEON.PLA.D01.BART.05285 |single bole tree |         17.1|               130|   15.2|\n|68dc7adf-48e2-4f7a-9272-9a468fde6d55 |BART_037.basePlot.vst |2015-08-26 |vst_BART_2015 |D01      |BART   |BART_037 |NEON.PLA.D01.BART.05279 |single bole tree |         13.7|               130|    9.8|\n|a8951ab9-4462-48dd-ab9e-7b89e24f2e03 |BART_044.basePlot.vst |2015-08-26 |vst_BART_2015 |D01      |BART   |BART_044 |NEON.PLA.D01.BART.05419 |single bole tree |         12.3|               130|    7.7|\n|eb348eaf-3969-46a4-ac3b-523c3548efeb |BART_044.basePlot.vst |2015-08-26 |vst_BART_2015 |D01      |BART   |BART_044 |NEON.PLA.D01.BART.05092 |single bole tree |         12.1|               130|   15.2|\n|2a4478ef-5970-40b6-b696-d1167cbe42ac |BART_044.basePlot.vst |2015-08-26 |vst_BART_2015 |D01      |BART   |BART_044 |NEON.PLA.D01.BART.05443 |single bole tree |         29.2|               130|   16.7|\n|e485203e-879e-4b56-b13a-0a6a56f0040f |BART_044.basePlot.vst |2015-08-26 |vst_BART_2015 |D01      |BART   |BART_044 |NEON.PLA.D01.BART.05432 |single bole tree |         12.1|               130|   10.6|\n\n\n:::\n:::\n\n\n:::\n\n\n\n::: {.alert .alert-secondary}\n{{< fa tasks >}} As our first challenge, we are going to combined all the files in `individual/` into a single analytical data file!\n:::\n\n## Paths\n\nFirst let's investigate our data. We want to access the files so we need to give R paths in order to load the data. We can work with the file system programmatically through R.\n\n### Creating portable paths with `here`\n\nWe'll use the `here` package and function `here()` to **create paths relative to the project root directory**.\n\nThis is a good practice as it **makes our code portable and independent of the where code is evaluated** or saved.\n\n::: callout-warning\nWhat you **never want to do is hard code paths in your code**. This makes your code non-portable and can lead to errors when sharing code or moving code to a different machine or to a different location within a project.\n:::\n\nLet's start by **creating a path to the downloaded data directory using `here`**.\n\nTo create relative paths to files or directories with `here()` we provide **character strings separated by commas that represent the path to the file or directory**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data_path <- here::here(\"data-raw\", \"wood-survey-data-master\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_data_path\n```\n:::\n\n\n``` r\n[1] \"/cloud/project/data-raw/wood-survey-data-master\"\n```\n\nWe can **use `raw_data_path` as our basis for specifying paths to files within it**. There's a number of ways we can do this in R but I wanted to introduce you to package `fs`. It has a nice interface and extensive functionality for working with your file system programmatically.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::path(raw_data_path, \"individual\")\n```\n:::\n\n\n``` r\n/cloud/project/data-raw/wood-survey-data-master/individual\n```\n\nLet's now **use function `dir_ls` to get a character vector of paths to all the individual files in directory `individual`**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindividual_paths <- fs::dir_ls(fs::path(raw_data_path, \"individual\"))\nhead(individual_paths)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n/cloud/project/data-raw/wood-survey-data-master/individual/NEON.D01.BART.DP1.10098.001.vst_apparentindividual.2015-08.basic.20190806T172340Z.csv\n/cloud/project/data-raw/wood-survey-data-master/individual/NEON.D01.BART.DP1.10098.001.vst_apparentindividual.2015-09.basic.20190806T144119Z.csv\n/cloud/project/data-raw/wood-survey-data-master/individual/NEON.D01.BART.DP1.10098.001.vst_apparentindividual.2016-08.basic.20190806T143255Z.csv\n/cloud/project/data-raw/wood-survey-data-master/individual/NEON.D01.BART.DP1.10098.001.vst_apparentindividual.2016-09.basic.20190806T143433Z.csv\n/cloud/project/data-raw/wood-survey-data-master/individual/NEON.D01.BART.DP1.10098.001.vst_apparentindividual.2016-10.basic.20190806T144133Z.csv\n/cloud/project/data-raw/wood-survey-data-master/individual/NEON.D01.BART.DP1.10098.001.vst_apparentindividual.2017-07.basic.20190806T144111Z.csv\n```\n\n\n:::\n:::\n\n\nWe can check how many files we've got:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(individual_paths)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 67\n```\n\n\n:::\n:::\n\n\nWe can now** use this vector of paths to read in files. Let's read the first file in and check it out.** We use **function `read_csv()` from `readr` package** which reads comma delimited files into tibbles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindiv_df <- readr::read_csv(individual_paths[1])\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 376 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): uid, namedLocation, eventID, domainID, siteID, plotID, individualI...\ndbl  (3): stemDiameter, measurementHeight, height\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nindiv_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 376 × 12\n   uid      namedLocation date       eventID domainID siteID plotID individualID\n   <chr>    <chr>         <date>     <chr>   <chr>    <chr>  <chr>  <chr>       \n 1 a36a162… BART_037.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n 2 68dc7ad… BART_037.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n 3 a8951ab… BART_044.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n 4 eb348ea… BART_044.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n 5 2a4478e… BART_044.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n 6 e485203… BART_044.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n 7 280c904… BART_044.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n 8 0e5060e… BART_044.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n 9 4918cac… BART_044.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n10 ef16cb9… BART_044.bas… 2015-08-26 vst_BA… D01      BART   BART_… NEON.PLA.D0…\n# ℹ 366 more rows\n# ℹ 4 more variables: growthForm <chr>, stemDiameter <dbl>,\n#   measurementHeight <dbl>, height <dbl>\n```\n\n\n:::\n:::\n\n\nRun `?read_delim` for more details on reading in tabular data.\n\n\n::: {.cell}\n<iframe src=\"https://readr.tidyverse.org/reference/read_delim.html\" width=\"672\" height=\"400px\" data-external=\"1\"></iframe>\n:::\n\n\n\n\n\n## Basic checks\n\nLet's **perform some of the basic checks** we learnt before we proceed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(indiv_df)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](assets/indiv_df.png){width=1451}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(indiv_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"uid\"               \"namedLocation\"     \"date\"             \n [4] \"eventID\"           \"domainID\"          \"siteID\"           \n [7] \"plotID\"            \"individualID\"      \"growthForm\"       \n[10] \"stemDiameter\"      \"measurementHeight\" \"height\"           \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(indiv_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [376 × 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ uid              : chr [1:376] \"a36a162d-ed1f-4f80-ae45-88e973855c68\" \"68dc7adf-48e2-4f7a-9272-9a468fde6d55\" \"a8951ab9-4462-48dd-ab9e-7b89e24f2e03\" \"eb348eaf-3969-46a4-ac3b-523c3548efeb\" ...\n $ namedLocation    : chr [1:376] \"BART_037.basePlot.vst\" \"BART_037.basePlot.vst\" \"BART_044.basePlot.vst\" \"BART_044.basePlot.vst\" ...\n $ date             : Date[1:376], format: \"2015-08-26\" \"2015-08-26\" ...\n $ eventID          : chr [1:376] \"vst_BART_2015\" \"vst_BART_2015\" \"vst_BART_2015\" \"vst_BART_2015\" ...\n $ domainID         : chr [1:376] \"D01\" \"D01\" \"D01\" \"D01\" ...\n $ siteID           : chr [1:376] \"BART\" \"BART\" \"BART\" \"BART\" ...\n $ plotID           : chr [1:376] \"BART_037\" \"BART_037\" \"BART_044\" \"BART_044\" ...\n $ individualID     : chr [1:376] \"NEON.PLA.D01.BART.05285\" \"NEON.PLA.D01.BART.05279\" \"NEON.PLA.D01.BART.05419\" \"NEON.PLA.D01.BART.05092\" ...\n $ growthForm       : chr [1:376] \"single bole tree\" \"single bole tree\" \"single bole tree\" \"single bole tree\" ...\n $ stemDiameter     : num [1:376] 17.1 13.7 12.3 12.1 29.2 12.1 23.4 39.5 10 10.6 ...\n $ measurementHeight: num [1:376] 130 130 130 130 130 130 130 130 130 130 ...\n $ height           : num [1:376] 15.2 9.8 7.7 15.2 16.7 10.6 18.4 19 5.7 8.7 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   uid = col_character(),\n  ..   namedLocation = col_character(),\n  ..   date = col_date(format = \"\"),\n  ..   eventID = col_character(),\n  ..   domainID = col_character(),\n  ..   siteID = col_character(),\n  ..   plotID = col_character(),\n  ..   individualID = col_character(),\n  ..   growthForm = col_character(),\n  ..   stemDiameter = col_double(),\n  ..   measurementHeight = col_double(),\n  ..   height = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(indiv_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     uid            namedLocation           date              eventID         \n Length:376         Length:376         Min.   :2015-08-26   Length:376        \n Class :character   Class :character   1st Qu.:2015-08-27   Class :character  \n Mode  :character   Mode  :character   Median :2015-08-27   Mode  :character  \n                                       Mean   :2015-08-27                     \n                                       3rd Qu.:2015-08-31                     \n                                       Max.   :2015-08-31                     \n   domainID            siteID             plotID          individualID      \n Length:376         Length:376         Length:376         Length:376        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n  growthForm         stemDiameter   measurementHeight     height     \n Length:376         Min.   : 2.00   Min.   : 10.0     Min.   : 0.50  \n Class :character   1st Qu.:13.90   1st Qu.:130.0     1st Qu.:10.60  \n Mode  :character   Median :20.20   Median :130.0     Median :14.30  \n                    Mean   :23.01   Mean   :129.5     Mean   :13.91  \n                    3rd Qu.:29.55   3rd Qu.:130.0     3rd Qu.:17.23  \n                    Max.   :69.90   Max.   :130.0     Max.   :30.20  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nskimr::skim(indiv_df)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |indiv_df |\n|Number of rows           |376      |\n|Number of columns        |12       |\n|_______________________  |         |\n|Column type frequency:   |         |\n|character                |8        |\n|Date                     |1        |\n|numeric                  |3        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|uid           |         0|          1.00|  36|  36|     0|      376|          0|\n|namedLocation |         0|          1.00|  21|  21|     0|        7|          0|\n|eventID       |         0|          1.00|  13|  13|     0|        1|          0|\n|domainID      |         0|          1.00|   3|   3|     0|        1|          0|\n|siteID        |         0|          1.00|   4|   4|     0|        1|          0|\n|plotID        |         0|          1.00|   8|   8|     0|        7|          0|\n|individualID  |         0|          1.00|  23|  23|     0|      374|          0|\n|growthForm    |         3|          0.99|   7|  16|     0|        4|          0|\n\n\n**Variable type: Date**\n\n|skim_variable | n_missing| complete_rate|min        |max        |median     | n_unique|\n|:-------------|---------:|-------------:|:----------|:----------|:----------|--------:|\n|date          |         0|             1|2015-08-26 |2015-08-31 |2015-08-27 |        3|\n\n\n**Variable type: numeric**\n\n|skim_variable     | n_missing| complete_rate|   mean|    sd|   p0|   p25|   p50|    p75|  p100|hist  |\n|:-----------------|---------:|-------------:|------:|-----:|----:|-----:|-----:|------:|-----:|:-----|\n|stemDiameter      |         0|             1|  23.01| 11.22|  2.0|  13.9|  20.2|  29.55|  69.9|▆▇▃▁▁ |\n|measurementHeight |         0|             1| 129.48|  6.76| 10.0| 130.0| 130.0| 130.00| 130.0|▁▁▁▁▇ |\n|height            |         0|             1|  13.91|  4.45|  0.5|  10.6|  14.3|  17.22|  30.2|▁▅▇▂▁ |\n\n\n:::\n:::\n\n\n\n## Update `individual.R`\n\nEverything looks good. Before moving on, let's **update our `individual.R` script with the code we've just written and want to formally keep as part of out processing pipeline.**\n\nAdd the following code and comments to the bottom of `individual.R`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## code to prepare `individual` dataset goes here\n## Setup ----\nlibrary(dplyr)\n\n## Combine individual tables ----\n# Create paths to inputs\nraw_data_path <- here::here(\"data-raw\", \"wood-survey-data-master\")\nindividual_paths <- fs::dir_ls(fs::path(raw_data_path, \"individual\"))\n```\n:::\n\n\n\nSo **let's now move onto the next step of reading in all the files and combining them together**. To do this, we'll examine the principles of **Iteration**.\n",
    "supporting": [
      "02c_paths-proj-structure_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}