{
  "hash": "e46cb59cce25aa8c7b983afca5e5b491",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic Data Management\" \nauthor: \"Dr Anna Krystallli\" \nsubtitle: \"Reproducible Research Data and Project Management in R\" \ninstitute: R-RSE \nmaterials_url: https://acce-rrresearch.netlify.app/ \nformat:\n  revealjs: \n    logo: assets/logo/r-rse-logo2.png\n    theme: [default, assets/css/styles.scss, assets/css/reveal.scss]\n    footer: \"[{{< fa home >}}](index.qmd)\"\n    from: markdown+emoji\n    template-partials:\n      - assets/layouts/title-slide.html\neditor: visual \npreload-iframes: true\nlightbox: true\nexecute:\n  echo: true\n  message: false\n---\n\n\n## Start at the beginning\n\n### **Plan your Research Data Management**\n\n-   **Start early**. Make an RDM plan before collecting data.\n    -   [**RDM checklist**](http://www.dcc.ac.uk/sites/default/files/documents/resource/DMP/DMP_Checklist_2013.pdf)\n-   Anticipate **data products** as part of your thesis **outputs**\n-   Think about what technologies to use\n\n## Own your data\n\n### **Take initiative & responsibility. Think long term.**\n\n<blockquote data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\nAct as though every short term study will become a long term one <a href=\"https://twitter.com/tomjwebb?ref_src=twsrc%5Etfw\">\\@tomjwebb</a>. Needs to be reproducible in 3, 20, 100 yrs\n\n</p>\n\n— Oceans Initiative (\\@oceansresearch) <a href=\"https://twitter.com/oceansresearch/status/556107891610894337?ref_src=twsrc%5Etfw\">January 16, 2015</a>\n\n</blockquote>\n\n<blockquote data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\nAct as though every short term study will become a long term one <a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a>. Needs to be reproducible in 3, 20, 100 yrs\n\n</p>\n\n— oceans initiative (\\@oceansresearch) <a href=\"https://twitter.com/oceansresearch/status/556107891610894337\">January 16, 2015</a>\n\n</blockquote>\n\n# Data management\n\n## Spreadsheets\n\n### extreme but in many ways defendable\n\n<blockquote data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> stay away from excel at all costs?\n\n</p>\n\n— Timothée Poisot (\\@tpoi) <a href=\"https://twitter.com/tpoi/status/556107000950829056\">January 16, 2015</a>\n\n</blockquote>\n\n## **excel: `read/entry only`**\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-cards=\"hidden\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> <a href=\"https://twitter.com/tpoi\">\\@tpoi</a> excel is fine for data entry. Just save in plain text format like csv. Some additional tips: <a href=\"https://t.co/8fUv9PyVjC\">pic.twitter.com/8fUv9PyVjC</a>\n\n</p>\n\n— Jaime Ashander (\\@jaimedash) <a href=\"https://twitter.com/jaimedash/status/556113131932381185\">January 16, 2015</a>\n\n</blockquote>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/jaimedash\">\\@jaimedash</a> just don’t let excel anywhere near dates or times. <a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> <a href=\"https://twitter.com/tpoi\">\\@tpoi</a> <a href=\"https://twitter.com/larysar\">\\@larysar</a>\n\n</p>\n\n— Dave Harris (\\@davidjayharris) <a href=\"https://twitter.com/davidjayharris/status/556126474550263809\">January 16, 2015</a>\n\n</blockquote>\n\n## **Databases: more robust**\n\nStronger quality control features. Advisable for multiple contributors\n\n<blockquote data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> databases? <a href=\"https://twitter.com/swcarpentry\">\\@swcarpentry</a> has a good course on SQLite\n\n</p>\n\n— Timothée Poisot (\\@tpoi) <a href=\"https://twitter.com/tpoi/status/556142573308608513\">January 16, 2015</a>\n\n</blockquote>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> <a href=\"https://twitter.com/tpoi\">\\@tpoi</a> if the data are moderately complex, or involve multiple people, best to set up a database with well designed entry form 1/2\n\n</p>\n\n— Luca Borger (\\@lucaborger) <a href=\"https://twitter.com/lucaborger/status/556226732496535552\">January 16, 2015</a>\n\n</blockquote>\n\n## **Databases: benefits**\n\n::: columns\n::: {.column width=\"50%\"}\n<blockquote data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> Entering via a database management system (e.g., Access, Filemaker) can make entry easier & help prevent data entry errors <a href=\"https://twitter.com/tpoi\">\\@tpoi</a>\n\n</p>\n\n— Ethan White (\\@ethanwhite) <a href=\"https://twitter.com/ethanwhite/status/556119480493813760\">January 16, 2015</a>\n\n</blockquote>\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/ethanwhite\">\\@ethanwhite</a> +1 Enforcing data types, options from selection etc, just some useful things a DB gives you, if you turn them on <a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> <a href=\"https://twitter.com/tpoi\">\\@tpoi</a>\n\n</p>\n\n— Gavin Simpson (\\@ucfagls) <a href=\"https://twitter.com/ucfagls/status/556120176748290048\">January 16, 2015</a>\n\n</blockquote>\n:::\n\n::: {.column width=\"50%\"}\n<blockquote data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> it also prevents a lot of different bad practices. It is possible to do some of this in Excel. <a href=\"https://twitter.com/tpoi\">\\@tpoi</a>\n\n</p>\n\n— Ethan White (\\@ethanwhite) <a href=\"https://twitter.com/ethanwhite/status/556119826582605824\">January 16, 2015</a>\n\n</blockquote>\n\nHave a look at the Data Carpentry [**SQL for Ecology** lesson](http://www.datacarpentry.org/sql-ecology-lesson/)\n:::\n:::\n\n# Data formats\n\n## **Data formats**\n\n-   **`.csv`**: *comma* separated values.\n-   **`.tsv`**: *tab* separated values.\n-   **`.txt`**: no formatting specified.\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> It has to be interoperability/openness - can I read your data with whatever I use, without having to convert it?\n\n</p>\n\n— Paul Swaddle (\\@paul_swaddle) <a href=\"https://twitter.com/paul_swaddle/status/556148166270406656\">January 16, 2015</a>\n\n</blockquote>\n\n#### **more unusual formats will need instructions on use.**\n\n## **Ensure data is machine readable**\n\n### bad\n\n![](assets/img/bad_xl1.png){width=\"800\"}\n\n------------------------------------------------------------------------\n\n### bad\n\n![](assets/img/bad_xl2.png){width=\"800\"}\n\n------------------------------------------------------------------------\n\n### good\n\n![](assets/img/good_xl.png){width=\"800\"}\n\n------------------------------------------------------------------------\n\n### ok\n\n![](assets/img/ok_xl.png){width=\"800\"}\n\n-   could help data entry\n-   `.csv` or `.tsv` copy would need to be saved.\n\n# Basic quality control\n\n## **Use good null values**\n\n### Missing values are a fact of life\n\n-   Usually, best solution is to **leave blank**\n-   **`NA`** or **`NULL`** are also good options\n-   **NEVER use `0`**. Avoid numbers like **`-999`**\n-   Don’t make up your own code for missing values\n\n------------------------------------------------------------------------\n\n## [**`read.csv()`**](http://stat.ethz.ch/R-manual/R-devel/library/utils/html/read.table.html) **utilities**\n\n-   **`na.string`:** character vector of values to be coded missing and replaced with `NA` to argument eg\n-   **`strip.white`:** Logical. if `TRUE` strips leading and trailing white space from unquoted character fields\n-   **`blank.lines.skip`:** Logical: if `TRUE` blank lines in the input are ignored.\n-   **`fileEncoding`:** if you're getting funny characters, you probably need to specify the correct encoding.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv(file, na.strings = c(\"NA\", \"-999\"), strip.white = TRUE, \n         blank.lines.skip = TRUE, fileEncoding = \"mac\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## [**`readr::read_csv()`**](https://cran.r-project.org/web/packages/readr/readr.pdf) **utilities**\n\n-   **`na`:** character vector of values to be coded missing and replaced with `NA` to argument eg\n-   **`trim_ws`:** Logical. if `TRUE` strips leading and trailing white space from unquoted character fields\n-   **`col_types`:** Allows for column data type specification. ([see more](https://cran.r-project.org/web/packages/readxl/vignettes/cell-and-column-types.html))\n-   **`locale`:** controls things like the default time zone, encoding, decimal mark, big mark, and day/month names\n-   **`skip`:** Number of lines to skip before reading data.\n-   **`n_max`:** Maximum number of records to read.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_csv(file, col_names = TRUE, col_types = NULL, locale = default_locale(), \n         na = c(\"\", \"NA\", \"-999\"), trim_ws = TRUE, skip = 0, n_max = Inf)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## Inspect\n\n#### Have a look at your data with `View(df)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(mtcars)\n```\n:::\n\n\n![](assets/view_mtcars.png){width=\"800\"}\n\n## Print\n\nCheck your **software interprets your data correctly** - eg see top few rows with `head(df)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n\n\n:::\n:::\n\n\n## Structure\n\nsee structure of any object with `str()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n\n\n:::\n:::\n\n\n## Summarise\n\n-   Check the **range of values** (and value types) in each column matches expectation.\n-   Check **units of measurement are what you expect**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb      \n Min.   :0.0000   Min.   :3.000   Min.   :1.000  \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  \n Median :0.0000   Median :4.000   Median :2.000  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812  \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  \n Max.   :1.0000   Max.   :5.000   Max.   :8.000  \n```\n\n\n:::\n:::\n\n\n## pkg [`skimr`](https://github.com/ropenscilabs/skimr)\n\n`skimr` provides a frictionless approach to displaying summary statistics the user can skim quickly to understand their data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"skimr\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n\n\n```{.r .cell-code}\nskimr::skim(trees)\n```\n\n\nTable: Data summary\n\n|                         |      |\n|:------------------------|:-----|\n|Name                     |trees |\n|Number of rows           |31    |\n|Number of columns        |3     |\n|_______________________  |      |\n|Column type frequency:   |      |\n|numeric                  |3     |\n|________________________ |      |\n|Group variables          |None  |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|  mean|    sd|   p0|   p25|  p50|   p75| p100|hist  |\n|:-------------|---------:|-------------:|-----:|-----:|----:|-----:|----:|-----:|----:|:-----|\n|Girth         |         0|             1| 13.25|  3.14|  8.3| 11.05| 12.9| 15.25| 20.6|▃▇▃▅▁ |\n|Height        |         0|             1| 76.00|  6.37| 63.0| 72.00| 76.0| 80.00| 87.0|▃▃▆▇▃ |\n|Volume        |         0|             1| 30.17| 16.44| 10.2| 19.40| 24.2| 37.30| 77.0|▇▅▁▂▁ |\n\n::: {.cell}\n\n:::\n\n\n## Validate\n\n::: columns\n::: {.column width=\"50%\"}\n### pkg [`assertr`](https://github.com/ropensci/assertr)\n\nThe `assertr` package supplies a suite of functions designed to verify assumptions about data and can be used so detect data errors during analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"assertr\")\n```\n:::\n\n\ne.g **confirm that `mtcars:`**\n\n-   has the columns \"mpg\", \"vs\", and \"am\"\n\n-   contains more than 10 observations\n\n-   column for 'miles per gallon' (mpg) is a positive number before further analysis\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(assertr)\nlibrary(dplyr)\nmtcars |>\n    verify(has_all_names(\"mpg\", \"vs\", \"am\", \"wt\")) %>%\n    verify(nrow(.) > 10) %>%\n    verify(mpg > 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 × 11\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4\n 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4\n 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1\n 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1\n 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2\n 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1\n 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4\n 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2\n 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2\n10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4\n# ℹ 22 more rows\n```\n\n\n:::\n:::\n\n:::\n:::\n\n# Data security\n\n## **Raw data are sacrosanct**\n\n::: columns\n::: {.column width=\"50%\"}\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> don't, not even with a barge pole, not for one second, touch or otherwise edit the raw data files. Do any manipulations in script\n\n</p>\n\n— Gavin Simpson (\\@ucfagls) <a href=\"https://twitter.com/ucfagls/status/556107371634634755\">January 16, 2015</a>\n\n</blockquote>\n\n\n```{=html}\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n:::\n\n::: {.column width=\"50%\"}\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\">\n\n<p lang=\"en\" dir=\"ltr\">\n\n<a href=\"https://twitter.com/tomjwebb\">\\@tomjwebb</a> <a href=\"https://twitter.com/srsupp\">\\@srsupp</a> Keep one or a few good master data files (per data collection of interest), and code your formatting with good annotation.\n\n</p>\n\n— Desiree Narango (\\@DLNarango) <a href=\"https://twitter.com/DLNarango/status/556128407445323778\">January 16, 2015</a>\n\n</blockquote>\n\n\n```{=html}\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n:::\n:::\n\n#### Aim for a clean, reproducible pipeline processing pipeline from raw to analytical data.\n\n## **Give yourself less rope**\n\n::: columns\n::: {.column width=\"50%\"}\n-   It's a good idea to [**revoke your own write permission**](https://kb.iu.edu/d/abdb) **to the raw data file**.\n\n-   Then you **can't accidentally edit it**.\n\n-   It also makes it **harder to do manual edits** in a moment of weakness, when you know you should **just add a line to your data cleaning script**.\n:::\n\n::: {.column width=\"50%\"}\n![](assets/jon-moore-399469-unsplash.jpg)\n:::\n:::\n\n# Get back [{{< fa home >}}](index.qmd)\n",
    "supporting": [
      "02a_rdm-intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}